it('should update buildingList and CurrencyCode when getBuildingByLocation() is called ', () => {
    component.getBuildingByLocation();
    expect(component.accountDetails.BuildingId).toEqual("");
    expect(component.accountDetails.BuildingId).toEqual("");
     window.sessionStorage['UserRoleId'] = 1;
  expect(component.currencyCode).toEqual(undefined);
    expect(component.buildingList).toEqual('result'); 
    component.getSupplierAccount();

  });

it('should update supplierAccountList and related properties when getSupplierAccount is called successfully', () => {
   
   component.getSupplierAccount();
   component.supplieraccountlist = [];
    expect(component.accountDetails.IsSupplierAccount).toBe('Yes');
     expect(component.supplierAccountList.length).toBe(1);
    expect(component.supplierAccountList[0].Name).toBe('Supplier 1')
    expect(component.showSubCommodity) toEqual(true);
 });

 it('should call AddAccount when AddAccount() is called ', () => {
    component.isloading = true; 
    component.accountform = {
      reset: jasmine.createSpy('reset'), 
    };
    component.checkUBHLicense = false;
    spyOn(notifyService, 'showError');
    component.getAccountGridData();
    expect(component.startRowNum)ToEqual(1);
    component.clearForm(component.accountform);
    expect(notifyService.showSuccess).toHaveBeenCalledWith(component.Accounts.account_add_success, '');
  });

it('should call SubCommodity when getSubCommodity() is called ', () => {
  component.UBMCommonService.getSubCommodity();
  const a = { SerialNumber: 5 };
    const b = { SerialNumber: 10 };

    const result = comparisonFunction(a, b);
    expect(result).toBe(-1);
    const result = comparisonFunction(b, a);
    expect(result).toBe(1);
});





it('should account details change when onAccountChange() is called', () => {
  
const value = { accountId: 123, accountName: 'Account 123' };
 expect(component.accountSelected).toEqual(value);
component.onAccountChange();
component.UBMCommonService.setAccountId(+value.accountId); 
component.accountNumberclicked = true;
component.invoiceInformation.accountNumber value.accountNumber; 
component.accountName = value.accountNumber;
component.searchTextAccountNumber = ""; 
component.isAccountDropdownOpen = !this.isAccountDropdownOpen;
component.invoiceInformation.premiseNumber="";
component.accountGroupNumber="";
component.invoiceInformation.accountNumber == "";
component.resetDropdown();
component.getCommodityByAccNo();
component.accountSelected();
expect(component.tempAccountsMappingList) ToEqual (component.accountsMappingList); 
expect(component.locationSelected) ToEqual (false);
expect(component.buildingSelected) ToEqual (false);
expect(component.providerSelected) ToEqual (false);
expect(accountSelected)ToEqual (true);
expect(component.locationSelected) ToEqual (true);
component.updateLocationList();
expect(component.providerSelected) ToEqual (true);
component.updateProviderList();
expect(component.buildingselected) ToEqual (true);
component.updateBuildingList()
component.premiseNumber()
});
