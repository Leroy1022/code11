 it('should location be displayed when getLocationList() is called', () => {
 
    const roleId = 'RoleId';
    const restService TestBed.inject(UBMCommonService);
    spyOn(restService, 'getLocationList').and.returnValue(of (facilitylist));
    component.getLocationList(roleId);
     expect(data.invoiceData.getLocationList).toHaveBeenCalledWith(roleId);
    expect(component.facilitylist).toEqual(Result);
  });



 it('should CurrencySymbolList appear when getCurrencySymbolList() is  called', () => {
    const restService TestBed.inject(UBMCommonService); 
    spyOn(restService, 'getCurrencySymbolList').and.returnValue(of (currencySymbolList));
    component.getCurrencySymbolList(value);
    expect(component.currencySymbolList).toBe(value);
  });



 it('should update location when updateLocationList() is  called ', () => {
 
    const locationList   = [
      { facilityName: 'Location1', locationId: '1' },
      { facilityName: 'Location1', locationId: '1' },
    ];
    component.tempAccountsMappingList = locationList ;
 
    component.updateLocationList();
 
    expect(component.locationList).toEqual([
      { facilityName: 'Location1', locationId: '1' },
      { facilityName: 'Location1', locationId: '1' },
    ]);
    expect(component.distinctLocationList).toEqual([
      { facilityName: 'Location1', locationId: '1' },
    ]);
    expect(component.locationclicked).toBe(true);
    expect(component.invoiceInformation.locationId).toBe('1');
    expect(component.locationName).toBe('Location1');
  });

  it('should update location when updateLocationList() is  called', () => {
 
    const locationList   = [];
    component.tempAccountsMappingList = locationList  ;

    component.updateLocationList();

    expect(component.locationList).toEqual([]);
    expect(component.distinctLocationList).toEqual([]);
    expect(component.locationclicked).toBe(false);
    expect(component.invoiceInformation.locationId).toBe('');
    expect(component.locationName).toBe('');
  });



 it('should update location when updateBuildingList() is  called ', () => {
 
    const buildingList   = [
      { buildingName: 'Building1',buildingId: '1', locationId: '1' },
      { buildingName: 'Building1',buildingId: '1', locationId: '1' },
    ];
    component.tempAccountsMappingList = buildingList ;
 
    component.updateBuildingList();
 
    expect(component.buildingList).toEqual([
      { buildingName: 'Building1',buildingId: '1', locationId: '1' },
      { buildingName: 'Building1',buildingId: '1', locationId: '1' },
    ]);
    expect(component.distinctBuildingList).toEqual([
      { buildingName: 'Building1',buildingId: '1', locationId: '1' },
    ]);
    expect(component.buildingclicked).toBe(true);
    expect(component.invoiceInformation.buildingId).toBe('1');
    expect(component.buildingName).toBe('Building1');
  });

  it('should update location when updateBuildingList() is  called', () => {
 
    const buildingList   = [];
    component.tempAccountsMappingList = buildingList  ;

    component.updateBuildingList();

    expect(component.buildingList).toEqual([]);
    expect(component.distinctBuildingList).toEqual([]);
    expect(component.buildingclicked).toBe(false);
    expect(component.invoiceInformation.buildingId).toBe('');
    expect(component.buildingName).toBe('');
  });



it('should update location when updateProviderList() is  called ', () => {
 
    const providerList   = [
      { providerName: 'Provider1', providerId: '1'  },
      { providerName: 'Provider1', providerId: '1'  },
    ];
    component.tempAccountsMappingList = providerList ;
 
    component.updateProviderList();
 
    expect(component.providerList).toEqual([
      { providerName: 'Provider1', providerId: '1'  },
      { providerName: 'Provider1', providerId: '1'  },
    ]);
    expect(component.distinctProviderList).toEqual([
      { providerName: 'Provider1', providerId: '1'  },
    ]);
    expect(component.providerclicked).toBe(true);
    expect(component.invoiceInformation.providerId).toBe('1');
    expect(component.providerName).toBe('Building1');
  });

  it('should update location when updateProviderList() is  called', () => {
 
    const providerList   = [];
    component.tempAccountsMappingList = providerList  ;

    component.updateProviderList();

    expect(component.providerList).toEqual([]);
    expect(component.distinctProviderList).toEqual([]);
    expect(component.providerclicked).toBe(false);
    expect(component.invoiceInformation.providerId).toBe('');
    expect(component.providerName).toBe('');
  });


 it('should update location when updateAccountNumberList() is  called ', () => {
 
    const accountNumberList   = [
      {  accountId: '1', accountNumber: 'Account1' },
      {  accountId: '1', accountNumber: 'Account1'  },
    ];
    component.tempAccountsMappingList = accountNumberList ;
 
    component.updateAccountNumberList();
 
    expect(component.accountNumberList).toEqual([
      {  accountId: '1', accountNumber: 'Account1'  },
      {  accountId: '1', accountNumber: 'Account1'  },
    ]);
    expect(component.distinctAccountNumberList).toEqual([
      { accountId: '1', accountNumber: 'Account1'  },
    ]);
    expect(component.accountNumberClicked).toBe(true);
    expect(component.invoiceInformation.accountNumber).toBe('1');
    expect(component.accountName).toBe('Building1');
  });

  it('should update location when updateAccountNumberList() is  called', () => {
 
    const accountNumberList   = [];
    component.tempAccountsMappingList = accountNumberList  ;

    component.updateProviderList();

    expect(component.accountNumberList).toEqual([]);
    expect(component.distinctAccountNumberList).toEqual([]);
    expect(component.accountNumberClicked).toBe(false);
    expect(component.invoiceInformation.accountNumber).toBe('');
    expect(component.accountName).toBe('');
  });
