it('should  Dropdown closed when clickedoutsideLocation() is  called', () => {
 
    component.isLocationDropdownOpen = true;
 
    component.clickedoutsideLocation();
 
    expect(component.isLocationDropdownOpen).toBe(false);
  });

  it('should  Dropdown closed when clickedoutsideBuilding() is  called', () => {
 
    component.isBuildingDropdownOpen = true;
 
    component.clickedoutsideBuilding();
 
    expect(component.isBuildingDropdownOpen).toBe(false);
  });  

   it('should  Dropdown closed when clickedOutsideProvider() is  called', () => {
 
    component.isProviderDropdownOpen = true;
 
    component.clickedOutsideProvider();
 
    expect(component.isProviderDropdownOpen).toBe(false);
  });   

  it('should  Dropdown closed when clickedOutsideAccount() is  called', () => {
 
    component.isAccountDropdownOpen = true;
 
    component.clickedOutsideAccount();
 
    expect(component.isAccountDropdownOpen).toBe(false);
  });     

  it('should  Dropdown closed when clickedOutsidePremise() is  called', () => {
 
    component.isPremiseDropdownOpen = true;
 
    component.clickedOutsideAccount();
 
    expect(component.isPremiseDropdownOpen).toBe(false);
  });      

  it('should entry save when onSaveButtonClick() is called', () => {
 
    component.editButtonClicked = false;
    component.saveButtonClicked = true;
 
    component.onSaveButtonClick();
 
    expect(component.editButtonClicked).toBe(true);
    expect(component.saveButtonClicked).toBe(false);
  });

 

  it('should entry edit when onEditButtonClick() is called', () => {
 
    component.saveButtonClicked = false;
    component.editButtonClicked = true;
 
    component.onEditButtonClick();
 
    expect(component.saveButtonClicked).toBe(true);
    expect(component.editButtonClicked).toBe(false);
  });




 it('should Location Change wen onLocationChange() is called ', () => {

    const restService TestBed.inject(UBMCommonService); 
  const Location: location[] [];
    spyOn(component, 'resetDropdown');
    spyOn(component, 'updateProviderList');
    spyOn(component, 'updateBuildingList');
    spyOn(component, 'updateAccountNumberList');


    component.onLocationChange(locationId.invoiceData);

    expect(component.locationClicked).toBe(true);
    expect(component.invoiceInformation.locationId).toBe(invoiceData.locationId);
    expect(component.locationName).toBe(invoiceData.facilityName);
    expect(component.searchTextLocation).toBe('');
    expect(component.isLocationDropdownOpen).toBe(false); 

    expect(component.resetDropdown).toHaveBeenCalled();

    expect(component.providerSelected).toBe(false);
    expect(component.buildingSelected).toBe(false);
    expect(component.accountSelected).toBe(false);

    expect(component.updateProviderList).toHaveBeenCalled();
    expect(component.updateBuildingList).toHaveBeenCalled();
    expect(component.updateAccountNumberList).toHaveBeenCalled();
  });


  it('should Location Change wen updateBuildingList() is called ', () => {
  const restService TestBed.inject(UBMCommonService); 
  const BuildingList: buildingList[] [];
  component.buildinglist  = component.tempAccountsMappingList;
   component.updateBuildingList();
  expect(component.distinctBuildingList.length)toBe(-1);
  expect(component.buildingClicked).toBe(true);
    expect(component.invoiceInformation.buildingId).toBe('1');
    expect(component.buildingName).toBe('Building A');
  );
