it('should call SubCommodity when getSubCommodity() is called ', () => {
   UBMCommonService.getSubCommodity.and.returnValue(of(mockSubCommodityDataList)); 
  result:subCommodity[];
  mockSubCommodityDataList:SerialNumber;
  component.getSubCommodity();
  expect(UBMCommonService.getSubCommodity).toHaveBeenCalled();
 if (a < b) {
    expect(component.result).toEqual(-1); 
  } else if(a > b) {
    expect(component.result).toEqual(1); 
  }
  else{
     expect(component.result).toEqual(0); 
  }
  expect(component.subCommodityList).toEqual(mockSubCommodityDataList);
});



it('should Sort SubCommodity when getSubCommodity() is called', () => {
  const subCommodityData: SubCommodity = [{mockSubCommodityDatalist}];
  spyOn(UBMCommonService, 'getSubCommodity').and.returnValue(of(mockSubCommodityDatalist));
  component.getSubCommodity();
  expect(component.subcommodityList).toEqual([{mockSubCommodityDatalist}]);
});


it('should Sort SubCommodity when getSubCommodity() is called', () => {
  const accountMockData.mockSubCommodityDatalist,
  spyOn(UBMCommonService, 'getSubCommodity').and.returnValue(of(accountMockData.mockSubCommodityDatalist));
  component.getSubCommodity();
  expect(component.getSubCommodity).toEqual([{mockSubCommodityDatalist}]);
});

it('should log an error when addAccount() fails', ()=>{
const errorMessage "Error adding an account!!!";
mockUBMService.addAccount.and.returnValue(throwError(() =>errorMessage));
spyon(console, 'log'); component.addAccount(); 
expect(console.log).toHaveBeenCalledwith(errorMessage);
});
