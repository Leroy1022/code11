it('should call SubCommodity when getSubCommodity() is called ', () => {
   UBMCommonService.getSubCommodity.and.returnValue(of(mockSubCommodityDataList)); 
  result:subCommodity[];
  mockSubCommodityDataList:SerialNumber;
  component.getSubCommodity();
  expect(UBMCommonService.getSubCommodity).toHaveBeenCalled();
 if (a < b) {
    expect(component.result).toEqual(-1); 
  } else if(a > b) {
    expect(component.result).toEqual(1); 
  }
  else{
     expect(component.result).toEqual(0); 
  }
  expect(component.subCommodityList).toEqual(mockSubCommodityDataList);
});



it('should Sort SubCommodity when getSubCommodity() is called', () => {
  const subCommodityData: SubCommodity[] = [
    { SerialNumber: 3 },
    { SerialNumber: 1 },
    { SerialNumber: 2 },
  ];

  spyOn(UBMCommonService, 'getSubCommodity').and.returnValue(of(subCommodityData));

  component.getSubCommodity();

  expect(component.subcommodityList).toEqual([
    { SerialNumber: 1 },
    { SerialNumber: 2 },
    { SerialNumber: 3 },
  ]);
