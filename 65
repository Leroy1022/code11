it('should log an error when getLocationList() fails', () => {
    const errorMessage = 'Error fetching the location list!!!';
    const mockUBMCommonService = jasmine.createSpyObj('UBMCommonService', ['getLocationList']);
    mockUBMCommonService.getLocationList.and.returnValue(throwError(errorMessage)); 
    component.ubmCommonService = mockUBMCommonService;
    spyOn(console, 'log');
    component.getLocationList();
    setTimeout(() => {
      expect(console.log).toHaveBeenCalledWith(errorMessage);
    }, 0);
  });


 it('should log an error when getCurrencySymbolList() fails', fakeAsync(() => {
    const errorMessage = 'Error fetching the currency list!!!';
    const mockUBMCommonService = jasmine.createSpyObj('UBMCommonService', ['getCurrencySymbolList']);
    mockUBMCommonService.getCurrencySymbolList.and.returnValue(throwError(errorMessage)); 
    component.ubmCommonService = mockUBMCommonService;
    spyOn(console, 'log');
    component.getCurrencySymbolList();
    tick();
    expect(console.log).toHaveBeenCalledWith(errorMessage);
  }));


it('should populate facilityList when getLocationList() is successful', () => {
  const facilityList = [
    {
      Id: '1',
      Name: 'Asset Manager - Location',
    },
    {
      Id: '2',
      Name: 'Energy Location MR',
    },
  ];
  window.sessionStorage['UserRoleId'] = 1;
  mockUBMCommonService.getLocationList.and.returnValue(of(facilityList));
  component.getLocationList();
  expect(component.facilityList).toEqual([]);
});



  it('should fetch and process years correctly when getYearList is called', () => {
    const mockYears = [2022, 2023]; 

    invoiceYearService.getInvoiceYears.and.returnValue(of(mockYears));
    component.getYearList();
    expect(component.YearList).toEqual(mockYears);
    expect(component.Year.length).toBe(mockYears.length);
    });
