
it('should set supplierAccountList to "Yes" when IsSupplierAccount is true', () => {

    spyOn(yourComponent.UBMCommonService, 'getSupplierAccount'); 
    component.getSupplierAccount();

    expect(component.supplierAccountList).toBe('Yes');
  });

  it('should set supplierAccountList based on the result of the service call', () => {
    const mockResult = [
      { AccountId: '1' }, 
      { AccountId: '2' },
    ];
    spyOn(component.UBMCommonService, 'getSupplierAccount').and.returnValue(of(mockResult)); // Mocking the service call
    component.accountDetails = {
      IsSupplierAccount: false,
      LocationId: '123',
      CommodityId: '456',
      AccountId: '789',
    };
    yourComponent.getSupplierAccount();
    expect(component.supplierAccountList).toEqual([/* Expected filtered result here */]);
  });

  it('should set showSubCommodity to true when CommodityId matches AccountsConstants.CommodityId', () => {

    spyOn(component.UBMCommonService, 'getSupplierAccount'); 
    yourComponent.accountDetails = {
      IsSupplierAccount: false,
      LocationId: '123',
      CommodityId: Account.CommodityId,  

    };
    component.getSupplierAccount();
    expect(component.showSubCommodity).toBe(true);
  });

  it('should set showSubCommodity to false when CommodityId does not match AccountsConstants.CommodityId', () => {
 
    spyOn(component.UBMCommonService, 'getSupplierAccount'); 
    yourComponent.accountDetails = {
      IsSupplierAccount: false,
      LocationId: '123',
      CommodityId: '999', 
    };
    component.getSupplierAccount();
    expect(component.showSubCommodity).toBe(false);
  });


the below code has to be replaced with add account error code

  it('error while adding an account', () => {
    const consoleSpy = spyOn(console, 'log'); 
    const notifyService = TestBed.inject(NotificationService); 
    const clearFormSpy = spyOn(component, 'clearForm'); 

    const err = 'error while adding an account '; 

    component.handleError(err);

    expect(consoleSpy).toHaveBeenCalledWith(err); 
    expect(notifyService.showError).toHaveBeenCalledWith('Accounts.account add fail'); 
    expect(clearFormSpy).toHaveBeenCalled(); 
  });

  it('should call AddAccount and handle success', () => {
    const accountDetails = {}; 

    const addAccountSpy = spyOn(UBMCommonService, 'AddAccount') ;

    const getAccountGridDataSpy = spyOn(component, 'getAccountGridData');
    const clearFormSpy = spyOn(component, 'clearForm');
    const showSuccessSpy = spyOn(NotificationService, 'showSuccess');

    component.someMethod(accountDetails);

    expect(addAccountSpy).toHaveBeenCalledWith(accountDetails);
    expect(getAccountGridDataSpy).toHaveBeenCalled();
    expect(clearFormSpy).toHaveBeenCalled();
    expect(showSuccessSpy).toHaveBeenCalledWith('Accounts.account_add_success', ''); 
        });

it('should filter data and update when getPagedDataAsync() is called', () => {
    const testData = [
      { FacilityName: 'Facility1', BuildingName: 'Building1' },
      { FacilityName: 'Facility2', BuildingName: 'Building2' },
  
    ];
    component.accountSearchData = testData;
    component.filterText = 'Facility1';
    component.getPagedDataAsync();
    expect(component.accountSearchData.length).toBe(1); 
    expect(component.currentPage).toBe(1); 
    expect(component.pageSize).toBe(10); 
    expect(component.totalItem).toBe(1); 
  });


 it('should sort data in ascending order when sort by is called', () => {
    const testData = [
      { LocationId: '11', FacilityName: 'Facility1'},
      { LocationId: '12', FacilityName: 'Facility2' },
    ];
    component.accountGridData = testData;
    component.accountHeaderColumns = [{ name: 'name', dataType: 'alphaNum' }];
    component.isAscending = true;
    component.retainSort = {}; 
    component.sortBy({ LocationId: 'LocationId', dataType: 'String' });
    expect(component.accountGridData[0].name).toBe('Alice');
    expect(component.accountGridData[1].name).toBe('John');
  });

it('should bind grid data and emit page content when bindGridData() is called ', () => {

    const testData = [
       { LocationId: '11', FacilityName: 'Facility1'},
      { LocationId: '12', FacilityName: 'Facility2' },

    ];

    component.accountGridData = testData;
    component.pageSize = 10;

    component.bindGridData();
  expect(component.totalItem).toBe(2); 
    expect(component.accountGridData.length).toBe(2); 
    spyOn(component.pageContent, 'emit');
    expect(component.pageContent.emit).toHaveBeenCalledWith(testData);
  });



it('should set supplierAccountList to "Yes" when IsSupplierAccount is true', () => {

   const SupplierAccountSpy = spyOn(UBMCommonService, 'getSupplierAccount').and.returnValue(of(AccountId));
    component.getSupplierAccount();

    expect(component.supplierAccountList).toBe('Yes');
  });

  it('should set supplierAccountList based on the result of the service call', () => {
    const mockResult = [
      { AccountId: '1' }, 
      { AccountId: '2' },
    ];
    const SupplierAccountSpy = spyOn(UBMCommonService, 'getSupplierAccount').and.returnValue(of(mockResult)); 
      component.accountDetails = {
      IsSupplierAccount: false,
      LocationId: '123',
      CommodityId: '456',
      AccountId: '789',
    };
    component.getSupplierAccount();
    expect(component.supplierAccountList).toEqual([/* Expected filtered result here */]);
  });

  it('should set showSubCommodity to true when CommodityId matches AccountsConstants.CommodityId', () => {

   const SupplierAccountSpy = spyOn(UBMCommonService, 'getSupplierAccount').and.returnValue(of(AccountId)); 
    yourComponent.accountDetails = {
      IsSupplierAccount: false,
      LocationId: '123',
      CommodityId: Account.CommodityId,  

    };
    component.getSupplierAccount();
    expect(yourComponent.showSubCommodity).toBe(true);
  });

  it('should set showSubCommodity to false when CommodityId does not match AccountsConstants.CommodityId', () => {
 
    const SupplierAccountSpy =spyOn(UBMCommonService, 'getSupplierAccount').and.returnValue(of(LocationId));; 
    component.accountDetails = {
      IsSupplierAccount: false,
      LocationId: '123',
      CommodityId: '999', 
    };
    component.getSupplierAccount();
    expect(component.showSubCommodity).toBe(false);
  });


 it('should sort data in ascending order when sort by is called', () => {
    const testData = [
      { LocationId: '11', FacilityName: 'Facility1'},
      { LocationId: '12', FacilityName: 'Facility2' },
    ];
    component.accountGridData = testData;
    component.accountHeaderColumns = [{ name: 'name', dataType: 'alphaNum' }];
    component.isAscending = true;
    component.retainSort = {}; 
    component.sortBy({ LocationId: 'LocationId', dataType: 'String' });
    expect(component.accountGridData[0].name).toBe('Alice');
    expect(component.accountGridData[1].name).toBe('John');
  });

it('should bind grid data and emit page content when bindGridData() is called ', () => {

    const testData = [
       { LocationId: '11', FacilityName: 'Facility1'},
      { LocationId: '12', FacilityName: 'Facility2' },

    ];

    component.accountGridData = testData;
    component.pageSize = 10;

    component.bindGridData();
  expect(component.totalItem).toBe(2); 
    expect(component.accountGridData.length).toBe(2); 
    spyOn(component.pageContent, 'emit');
    expect(component.pageContent.emit).toHaveBeenCalledWith(testData);
  });
const SupplierAccountSpy =
.and.returnValue(of(err))


const ubmCommonServiceSpy = jasmine.createSpyObj('UBMCommonService', ['getSupplierAccount']);
ubmCommonServiceSpy.getSupplierAccount.and.returnValue(of(AccountId));



const ubmCommonServiceSpy = jasmine.createSpyObj('UBMCommonService', ['getSupplierAccount']);
ubmCommonServiceSpy.getSupplierAccount.and.returnValue(of(mockResult));



const ubmCommonServiceSpy = jasmine.createSpyObj('UBMCommonService', ['getSupplierAccount']);
ubmCommonServiceSpy.getSupplierAccount.and.returnValue(of(LocationId));
