it('should delete the account and show success notification when deleteAccount() is called', () => {

    const ngFormMock: NgForm = {
      resetForm: () => {},
    } as any; 

 
    spyOn(UBMCommonService, 'deleteAccount').and.returnValue({
      subscribe: (callbacks: any) => {
        callbacks.next("true"); 
        callbacks.complete();
      },
    });

    component.deleteAccount(ngFormMock);

    expect(component.isLoading).toBe(true);
    expect(ubmService.deleteAccount).toHaveBeenCalledWith(123); 

    expect(ngFormMock.resetForm).toHaveBeenCalled();

  });


it('should update commodityList when getCommodityList() is called successfully', () => {
    const mockResponse = [
      // Add sample commodity data here
    ];
    spyOn(UBMCommonService, 'getCommodityList').and.returnValue(of(mockResponse)); 
    component.getCommodityList();
    expect(component.commodityList).toEqual(mockResponse); 
  });

it('should update providerList when getProviderList() is called successfully', () => {

    const mockResponse = [
      // Add sample provider data here
    ];

    spyOn(UBMCommonService, 'getProviderList').and.returnValue(of(mockResponse)); 

    component.getProviderList();

    expect(component.providerList).toEqual(mockResponse); 

  });

it('should update accountTypeList when getAccountType() is called successfully', () => {
    const mockResponse = [
      // Add sample account type data here
    ];
    spyOn(ubmService, 'getAccountType').and.returnValue(of(mockResponse)); 

    component.getAccountType();

    expect(component.accountTypeList).toEqual(mockResponse); 

  });

it('should set onlyUrjanetLicense to true when isUjanetLicenseExistAndActive() returns true', () => {

    spyOn(commonService, 'isUjanetLicenseExistAndActive').and.returnValue(true);

    component.checkUrjanetLicense();

    expect(component.onlyUrjanetLicense).toBe(true); 
  });

  it('should set onlyUrjanetLicense to false when isUjanetLicenseExistAndActive() returns false', () => {

    spyOn(commonService, 'isUjanetLicenseExistAndActive').and.returnValue(false);

    component.checkUrjanetLicense();

    expect(component.onlyUrjanetLicense).toBe(false); 
  });
