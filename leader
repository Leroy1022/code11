it('should delete the account and show success notification when deleteAccount() is called', () => {

    const ngFormMock: NgForm = {
      resetForm: () => {},
    } as any; 

 
    spyOn(UBMCommonService, 'deleteAccount').and.returnValue({
      subscribe: (callbacks: any) => {
        callbacks.next("true"); 
        callbacks.complete();
      },
    });

    component.deleteAccount(ngFormMock);

    expect(component.isLoading).toBe(true);
    expect(ubmService.deleteAccount).toHaveBeenCalledWith(123); 

    expect(ngFormMock.resetForm).toHaveBeenCalled();

  });


it('should update commodityList when getCommodityList() is called successfully', () => {
    const mockResponse = [
      // Add sample commodity data here
    ];
    spyOn(UBMCommonService, 'getCommodityList').and.returnValue(of(mockResponse)); 
    component.getCommodityList();
    expect(component.commodityList).toEqual(mockResponse); 
  });

it('should update providerList when getProviderList() is called successfully', () => {

    const mockResponse = [
      // Add sample provider data here
    ];

    spyOn(UBMCommonService, 'getProviderList').and.returnValue(of(mockResponse)); 

    component.getProviderList();

    expect(component.providerList).toEqual(mockResponse); 

  });

it('should update accountTypeList when getAccountType() is called successfully', () => {
    const mockResponse = [
      // Add sample account type data here
    ];
    spyOn(ubmService, 'getAccountType').and.returnValue(of(mockResponse)); 

    component.getAccountType();

    expect(component.accountTypeList).toEqual(mockResponse); 

  });

it('should set onlyUrjanetLicense to true when isUjanetLicenseExistAndActive() returns true', () => {

    spyOn(commonService, 'isUjanetLicenseExistAndActive').and.returnValue(true);

    component.checkUrjanetLicense();

    expect(component.onlyUrjanetLicense).toBe(true); 
  });

  it('should set onlyUrjanetLicense to false when isUjanetLicenseExistAndActive() returns false', () => {

    spyOn(commonService, 'isUjanetLicenseExistAndActive').and.returnValue(false);

    component.checkUrjanetLicense();

    expect(component.onlyUrjanetLicense).toBe(false); 
  });



it('should reset accountDetails and mark form as untouched when clearForm() is called', () => {
  
    component.accountDetails = { /* Initial accountDetails values */ };
    component.filterText = 'Initial filter text';

    const mockForm: NgForm = {
      form: {
        markAsUntouched: jasmine.createSpy('markAsUntouched'), 
      },
    } as any; 

    component.clearForm(mockForm);

    expect(component.accountDetails).toEqual(new Account()); 
    expect(component.filterText).toBe(''); 
    expect(mockForm.form.markAsUntouched).toHaveBeenCalled(); 

  });


it('should update the account when updateAccount() is called', () => {
    spyOn(yourService, 'updateAccount').and.returnValue(of(true));
    component.updateAccount({} as NgForm); 
    expect(component.isLoading).toBe(false); 
  });

  it('should handle an error when updateAccount() is called', () => {
    spyOn(yourService, 'updateAccount').and.returnValue(throwError('Some error'));
    component.updateAccount({} as NgForm);
    expect(component.isLoading).toBe(false); 

  });



 it('should return true when checkDuplicate() is called', () => {
    component.accountDetails ;
    component.accountGridPageData;

    const mockForm: NgForm = {
      form: {
        markAsUntouched: jasmine.createSpy('markAsUntouched'), // Spy on markAsUntouched
      },
    } as any;

    const result = component.checkDuplicate('add', mockForm);

    expect(result).toBe(true); 
    expect(mockForm.form.markAsUntouched).toHaveBeenCalled(); 

  });

  it('should return true and clear the form when editingwhen checkDuplicate() is called', () => {
  
    component.accountDetails = { accountId: 1 };

    const mockForm: NgForm = {
      form: {
        markAsUntouched: jasmine.createSpy('markAsUntouched'),
      },
    } as any; 

    const result = component.checkDuplicate('edit', mockForm);

    expect(result).toBe(true); 
    expect(mockForm.form.markAsUntouched).toHaveBeenCalled(); 
  });



  it('should call Subcommodity when getSubcommodity() is called ', () => {
    const subCommodityData: SubCommodity = { 
    SerialNumber: 3 
    };
      
    spyOn(ubmService, 'getSubcommodity').and.returnValue(of(subCommodityData));

    component.ngOnInit();

    expect(UBMCommonService.getSubcommodity).toHaveBeenCalled();
    expect(component.subCommodityList).toEqual({ 
    SerialNumber: 3 
    });
  });

  it('should handle error  when getSubcommodity() is called', () => {
    const errorMessage = 'Service error';
    spyOn(UBMCommonService, 'getSubcommodity').and.returnValue(
      throwError(errorMessage)
    );
    component.ngOnInit();
    expect(UBMCommonService.getSubcommodity).toHaveBeenCalled();
    expect(component.subCommodityList).toEqual([]);
    expect(console.log).toHaveBeenCalledWith(errorMessage);
  });


  it('should add an account when AddAccount() is called', () => {
  
    spyOn(UBMCommonService, 'AddAccount').and.returnValue(of({}));
    spyOn(component, 'getAccountGridData');
    const accountForm = { resetForm: () => {} } as NgForm;
    
    component.addAccount(accountForm);

    expect(component.isLoading).toBe(false);
    expect(component.checkUBMLicense).toBe(false);
    expect(UBMCommonService.AddAccount).toHaveBeenCalledWith(component.accountDetails);
    expect(component.getAccountGridData).toHaveBeenCalled();
    expect(accountForm.resetForm).toHaveBeenCalled();
 
  });

  it('should handle errors when AddAccount() is called', () => {
    const errorMessage = 'Add account error';
    spyOn(UBMCommonService, 'AddAccount').and.returnValue(throwError(errorMessage));
    spyOn(component, 'clearForm');
    spyOn(console, 'log');
    const accountForm = { resetForm: () => {} } as NgForm;
    
    component.addAccount(accountForm);

    expect(component.isLoading).toBe(false);
    expect(component.checkUBMLicense).toBe(false);
    expect(UBMCommonService.AddAccount).toHaveBeenCalledWith(component.accountDetails);
    expect(component.clearForm).toHaveBeenCalledWith(accountForm);
    expect(console.log).toHaveBeenCalledWith(errorMessage);

  });

  it('should handle checkUBMLicense', () => {

    spyOnProperty(component, 'checkUBMLicense', 'get').and.returnValue(true);
    spyOn(notifyService, 'showError');

    const accountForm = { resetForm: () => {} } as NgForm;
    
    component.addAccount(accountForm);

    expect(notifyService.showError).toHaveBeenCalledWith(component.Accounts.max_account_configured, '');
  });

it('should update an account when updateAccount() Is called ', () => {

    spyOn(UBMCommonService, 'updateAccount').and.returnValue(of(true));
    spyOn(component, 'getAccountGridData');
    const accountForm = { resetForm: () => {} } as NgForm;
    
    component.updateAccount(accountForm);

    expect(component.isLoading).toBe(false);
    expect(component.checkDuplicate).toHaveBeenCalled();
    expect(component.accountDetails.IsUpdate).toBe(false);
    expect(UBMCommonService.updateAccount).toHaveBeenCalledWith(component.accountDetails);
    expect(component.getAccountGridData).toHaveBeenCalled();
    expect(component.startRowNum).toBe(1);
    expect(accountForm.resetForm).toHaveBeenCalled();
  
  });

  it('should handle errors when updateAccount() Is called', () => {
    const errorMessage = 'Update account error';
    spyOn(UBMCommonService, 'updateAccount').and.returnValue(throwError(errorMessage));
    spyOn(component, 'clearForm');
    spyOn(console, 'log');
    const accountForm = { resetForm: () => {} } as NgForm;
    
    component.updateAccount(accountForm);

    expect(component.isLoading).toBe(false);
    expect(component.checkDuplicate).toHaveBeenCalled();
    expect(component.accountDetails.IsUpdate).toBe(false);
    expect(UBMCommonService.updateAccount).toHaveBeenCalledWith(component.accountDetails);
    expect(component.clearForm).toHaveBeenCalledWith(accountForm);
    expect(console.log).toHaveBeenCalledWith(errorMessage);

  });
 
it('should handle onlyUrjanetLicense when checkUrjanetLicense() Is called', () => { 
component.checkUrjanetLicense();
expect(component.onlyUrjanetLicense) .toEqual (Component.commonService.isUjanetLicenseExistAndActive());
});

it('should delete an account when deleteAccount() is called', () => {

    spyOn(ubmService, 'deleteAccount').and.returnValue(of(true));
    spyOn(component, 'getAccountGridData');
    const accountForm = { resetForm: () => {} } as NgForm;
    
    component.deleteAccount(accountForm);

    expect(component.isLoading).toBe(false);
    expect(notifyService.showError).not.toHaveBeenCalled();
    expect(ubmService.deleteAccount).toHaveBeenCalledWith(component.accountDetails.AccountId);
    expect(component.getAccountGridData).toHaveBeenCalled();
    expect(component.clearForm).toHaveBeenCalledWith(accountForm);

  });

it('should return false in "add" mode when checkDuplicate() is called', () => {

    component.accountDetails = {
      ProviderId: 1,
      CommodityId: 2,
      AccountNumber: '12345',

    };
    component.accountGridPageData = [

      { ProviderId: 3, CommodityId: 4, AccountNumber: '67890', /* Other properties... */ },
      { ProviderId: 5, CommodityId: 6, AccountNumber: 'abcdef', /* Other properties... */ },
    ];
    const accountForm = { resetForm: () => {} } as NgForm;

    const result = component.checkDuplicate('add', accountForm);

    expect(result).toBe(false);
  });

  it('should return true in "add" mode when checkDuplicate() is called', () => {

    component.accountDetails = {
      ProviderId: 1,
      CommodityId: 2,
      AccountNumber: '12345',

    };
    component.accountGridPageData = [

      { ProviderId: 1, CommodityId: 2, AccountNumber: '12345', /* Other properties... */ },
      { ProviderId: 5, CommodityId: 6, AccountNumber: 'abcdef', /* Other properties... */ },
    ];
    const accountForm = { resetForm: () => {} } as NgForm;

    const result = component.checkDuplicate('add', accountForm);

    expect(result).toBe(true);

  });


it('should do nothing when previousPage() Is called', () => {

    const PCurrentpage = 1;
    const PpageSize = 10;
    component.currentPage = PCurrentpage;

    component.previousPage(PCurrentpage, PpageSize);

    // You should assert that the currentPage and other properties remain unchanged.
    expect(component.currentPage).toBe(PCurrentpage);
  });

  it('should decrement the current page and emit page data when previousPage() Is called', () => {
 
    const PCurrentpage = 3;
    const PpageSize = 10;
    component.currentPage = PCurrentpage;
    spyOn(component, 'emitPageData');

    component.previousPage(PCurrentpage, PpageSize);

    expect(component.currentPage).toBe(PCurrentpage - 1);
    expect(component.emitPageData).toHaveBeenCalledWith(PCurrentpage - 1, PpageSize);
  });

it('should reset all flags when changeFlagHeader() is called', () => {

    const data: AccountHeaderDetails = { clickFlag: false };
    spyOn(component, 'resetAllFlag');

    component.changeFlagHeader(data);

    expect(component.resetAllFlag).toHaveBeenCalled();
    expect(data.clickFlag).toBe(true);
  });
it('should reset all flags in accountHeaderColumns to false when resetAllFlag() is called', () => {

    component.accountHeaderColumns = 
      clickFlag: true,


    component.resetAllFlag();

    component.accountHeaderColumns.forEach((v) => {
      expect(v.clickFlag).toBe(false);
    });

it('should reset the current page to 1 and emit page data when pageSizeChanged() is called ', () => {

    component.currentPage = 3; 
    component.pageSize = 10; 
    spyOn(component, 'emitPageData');

    component.pageSizeChanged();

    expect(component.currentPage).toBe(1); // Current page should be reset to 1
    expect(component.emitPageData).toHaveBeenCalledWith(1, component.pageSize);
  });


  it('should return false and show an error when addAccountValidation() is called', () => {

    component.accountDetails = {
      AccountNumber: '12345',
      CommodityId: 1,
      PremiseNumber: null,
      AccountGroupNumber: null,
    };
    component.accountGridPageData = [

      {
        AccountNumber: '12345',
        CommodityId: 1,
        PremiseNumber: null,
        AccountGroupNumber: null,
      },
    ];
    spyOn(component.notifyService, 'showError');

    const isValid = component.addAccountValidation();

    expect(isValid).toBe(false);
    expect(component.notifyService.showError).toHaveBeenCalledWith(
      component.Accounts.record_exists_premiseId_group,
      ''
    );
  });

  it('should return false and show an error when addAccountValidation() is called', () => {

    component.accountDetails = {
      AccountNumber: '12345',
      CommodityId: 1,
      ProviderId: 2,
      PremiseNumber: 'ABC123',
      AccountGroupNumber: 'GroupA',
    };
    component.accountGridPageData = [

      {
        AccountNumber: '12345',
        CommodityId: 1,
        ProviderId: 2,
        PremiseNumber: 'ABC123',
        AccountGroupNumber: 'GroupA',
      },
    ];
    spyOn(component.notifyService, 'showError');

    const isValid = component.addAccountValidation();

    expect(isValid).toBe(false);
    expect(component.notifyService.showError).toHaveBeenCalledWith(
      component.Accounts.record_already_exists,
      ''
    );
  });

  it('should return true when addAccountValidation() is called', () => {

    component.accountDetails = {
      AccountNumber: '12345',
      CommodityId: 1,
      ProviderId: 2,
      PremiseNumber: 'ABC123',
      AccountGroupNumber: 'GroupA',
    };
    component.accountGridPageData = [

      {
        AccountNumber: '67890',
        CommodityId: 3,
        ProviderId: 4,
        PremiseNumber: 'XYZ789',
        AccountGroupNumber: 'GroupB',
      },
    ];

    const isValid = component.addAccountValidation();

    expect(isValid).toBe(true);
  });
