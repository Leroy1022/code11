 it('should test Building list', ()=> {
// given
const restService TestBed.inject(UBMCommonService);
const allBuildingList: buildingList[] [];
spyon(restService, 'AllBuildingList').and.returnValue(of (allBuildingList));
// when
component.getAllBuildingList();
// then
expect(component.allBuildingList.length).toBe(1);
  });  

 it('should test Provider list', ()=> {
// given
const restService = TestBed.inject(UBMCommonService);
const providerList: providerList[] = [];
spyon(restService, 'getProviderList').and.returnValue(of (providerList));
// when
component.getProviderList();
// then
expect(component.providerList.length).toBe(1);
  }); 

 it('should test Account list', ()=> {
// given
const restService TestBed.inject(UBMCommonService); 
const AccountList: accountList[] [];
spyOn(restService, 'getAccountList').and.returnValue(of (accountList));
// when
component.getAccountList();
// then
expect(component.accountList.length).toBe(1);
  });

it('should test UBMMeter list', ()=> {
// given
const restService TestBed.inject(UBMCommonService); 
const UBMMeter: UBMMeterList[] [];
spyOn(restService, 'getUBMMeterList').and.returnValue(of (UBMMeterList));
// when
component.getUBMMeterList();
// then
expect(component.UBMMeterList.length).toBe(1);
  });


it('should test Commodity list', ()=> {
// given
const restService TestBed.inject(UBMCommonService); 
const CommodityList: commodityList[] [];
spyOn(restService, 'getCommodityList').and.returnValue(of (commodityList));
// when
component.getCommodityList();
// then
expect(component.commodityList.length).toBe(1);
  });


it('should toggle Dropdown when toggleLocationDropdown() is  called', () => {
 
    component.isLocationDropdownOpen = false;
 
    component.toggleLocationDropdown();
 
    expect(component.isLocationDropdownOpen).toBe(true);
 
    component.toggleLocationDropdown();
 
    expect(component.isLocationDropdownOpen).toBe(false);
  });

it('should toggle Dropdown when toggleBuildingDropdown() is  called', () => {
    component.isBuildingDropdownOpen = false;

    component.toggleBuildingDropdown();

    expect(component.isBuildingDropdownOpen).toBe(true);

    component.toggleBuildingDropdown();

    expect(component.isBuildingDropdownOpen).toBe(false);
  });

it('should toggle Dropdown when toggleProviderDropdown() is  called', () => {
    component.isProviderDropdownOpen = false;

    component.toggleProviderDropdown();

    expect(component.isProviderDropdownOpen).toBe(true);

    component.toggleProviderDropdown();

    expect(component.isProviderDropdownOpen).toBe(false);
  });

it('should toggle Dropdown when toggleAccountDropdown() is  called', () => {
    component.isAccountDropdownOpen = false;

    component.toggleAccountDropdown();

    expect(component.isAccountDropdownOpen).toBe(true);

    component.toggleAccountDropdown();

    expect(component.isAccountDropdownOpen).toBe(false);
  });

it('should toggle Dropdown when togglePremiseDropdown() is  called', () => {
    component.isPremiseDropdownOpen = false;

    component.togglePremiseDropdown();

    expect(component.isPremiseDropdownOpen).toBe(true);

    component.togglePremiseDropdown();

    expect(component.isPremiseDropdownOpen).toBe(false);
  });


it('should test GetAccountsMappingList list', ()=> {
// given
const restService TestBed.inject(UBMCommonService); 
const AccountsMappingList: accountsMappingList[] [];
spyOn(restService, 'GetAccountsMappingList').and.returnValue(of (accountsMappingList));
// when
component.GetAccountsMappingList(roleId);
// then
expect(component.accountsMappingList.length).toBe(1);
  });


 it('should toggle Dropdown when dropDownLocation() is  called', () => {
 
    component.showLocationsDropdown = false;
 
    component.dropDownLocation();
 
    expect(component.showLocationsDropdown).toBe(true);
 
    component.dropDownLocation();
 
    expect(component.showLocationsDropdown).toBe(false);
  });

 it('should toggle Dropdown when getSelectedLocation() is  called', () => {
    const restService TestBed.inject(UBMCommonService); 
    spyOn(restService, 'getSelectedLocation').and.returnValue(of (selectedLocation));
    component.getSelectedLocation(value);
    expect(component.selectedLocation).toBe(value);
  });

