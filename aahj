
  it('should toggle showDropDown property and update buttonsDisabled when toggleMenu() Is called', () => {
    // Initial state
    component.showDropDown = false;
    component.Year = [
      { IsChecked: true },
      { IsChecked: true },
      { IsChecked: true },
    ];

    component.toggleMenu();
    expect(component.showDropDown).toBe(true);
    expect(component.buttonsDisabled).toBe(true);
    component.toggleMenu();
    expect(component.showDropDown).toBe(false);
    component.Year = [
      { IsChecked: true },
      { IsChecked: false },
      { IsChecked: true },
    ];
    component.toggleMenu();
    expect(component.buttonsDisabled).toBe(false);
  });

it('should toggle IsRowExpanded when toggleRowMenu is called', () => {
    const sampleData: InvoiceDetailsForGrid = { IsRowExpanded: false };
    component.toggleRowMenu(sampleData);
    expect(sampleData.IsRowExpanded).toBe(true);
    component.toggleRowMenu(sampleData);
    expect(sampleData.IsRowExpanded).toBe(false);
  });

 it('should update showDropDown and Year  when clickedOutside() is called', () => {
    component.showDropDown = true;
    component.retainInvoiceYearList = [
      { Year: 2021, IsYearDisabled: false, IsChecked: true },
      { Year: 2022, IsYearDisabled: true, IsChecked: false },
    ];
    component.clickedOutside();
    expect(component.showDropDown).toBe(false);
    expect(component.Year).toEqual([
      { Year: 2021, IsYearDisabled: false, IsChecked: true },
      { Year: 2022, IsYearDisabled: true, IsChecked: false },
    ]);
    expect(component.checkedList).toEqual([2021]);
  });


 it('should set showClearAll when clickedOutsideFilterIcon() is called', () => {
    component.showClearAll = true;
    component.clickedOutsideFilterIcon();
    expect(component.showClearAll).toBe(false);
  });

it('should set isFilterApplyDisable to false and call toggleFilterSelection when getSelectedFilterData() is called', () => {
    
    component.isFilterApplyDisable = true;

    const filterResult = { 1,2,3 };

    spyOn(component, 'toggleFilterSelection');

    component.getSelectedFilterData(filterResult);

    expect(component.isFilterApplyDisable).toBe(false);

    expect(component.toggleFilterSelection).toHaveBeenCalledWith(filterResult);
  });

it('should set isFilterApplyDisable to false and showDateRange when getSelectedUpdatedDateTime() is called', () => {
    component.isFilterApplyDisable = true;
    component.selectedDateRange = "calenderCustomRange";
    component.retainSelectedRadioState = "calender CustomRange";
    component.getSelectedUpdatedDateTime();
    expect(component.isFilterApplyDisable).toBe(false);
    expect(component.showDateRange).toBe(true);
    component.showDateRange = false;
    component.selectedDateRange = "anotherValue";
    component.retainSelectedRadioState = "anotherValue";
    component.getSelectedUpdatedDateTime();
    expect(component.isFilterApplyDisable).toBe(false);
    expect(component.showDateRange).toBe(false);
  });

it('should handle an empty string when removeNumberComma() is caled', () => {
    const objName = '';
    const result = component.removeNumberComma(objName);
    expect(result).toBe('');
  });

  it('should handle a string with no non-numeric characters when removeNumberComma() is caled', () => {
    const objName = '123456';
    const result = component.removeNumberComma(objName);
    expect(result).toBe(objName);
  });




it('should bind grid data when bindGridData() is called ', () => {
    const sampleData = [1,2];
    component.result = sampleData;

    component.pageSize = 10;

    component.bindGridData();

    expect(component.totalItem).toBe(sampleData.length);

    expect(component.result).toEqual(sampleData.slice(0, component.pageSize));

    expect(component.pageContent.emit).toHaveBeenCalledWith(component.result);

    expect(component.endRowNum).toBe(
      sampleData.length > 0 ? Math.min(component.totalItem + 1, component.pageSize) : undefined
    );
 
    expect(component.totalItems).toBe(
      sampleData.length > 0 ? Math.ceil(component.totalItem / component.pageSize) : 1
    );
  
    expect(component.isLoading).toBe(false);
  });
