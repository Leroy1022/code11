
it('should toggle dropdown when toggleActionsDropdown() id called',()=>{
const actionsClicked = component.actionsClicked;
component.toggleActionsDropdown();
expect(component.actionsClicked).toBe(actionsClicked);
});

it('should actionsClicked be false when clickedOutsideActions()', () => {
component.actionsClicked = true;
component.clickedOutsideActions();
expect(component.actionsClicked).toBe(false);
});

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should toggle expand when toggleRowMenu() is called',()=>{
const IsRowExpanded = data.IsRowExpanded;
component.toggleRowMenu(data);
expect(data.IsRowExpanded).toBe(IsRowExpanded);
});

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should flagHeader update when changeflagheader() is called', () => {
 
 const data: InvoicoleaderDetails = {clickFlag: false};
 expect(component.filterclicked).toBe(false);
 component.resetAllFlag(data);
 expect(data.clickFlag).toBe(true);
});  

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should clickFlag reset when resetAllFlag() is called', () => {
     expect( component.invoiceHeader.clickFlag).toBe(true);
     component.resetAllFlag();
     expect(component.invoiceHeader[0].clickFlag).toBe(false);
     expect(component.invoiceHeader[1].clickFlag).toBe(false);
});

----x-----x-----x-----x-----x-----x-----x-----x----x----x
 it('should toggle date range be selected when toggleCustomRange() is called', () => {
  component.toggleCustomRange();
  expect(component.customRange).toBe(true);
constcomponent.selectedDateRange = calenderCustomRange;
 });
----x-----x-----x-----x-----x-----x-----x-----x----x----x

it('should selectedRows be displayed whengetAllSelectedRows() is called', () => {
   expect(row.IsRowChecked).toBe(false)
    
    row.IsRowChecked = component.selectAllRows ;

    component.countSelected();

    component.getAllSelectedRows();

    expect(component.result[0].IsRowChecked).toBe(true);
    expect(component.result[1].IsRowChecked).toBe(true);
    expect(component.countSelected).toHaveBeenCalled();
  });

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should selected be counted when countSelected() is called ', () => {
    component.result = [ { IsRowChecked: true }, { IsRowChecked: false }, { IsRowChecked: true }];
    component.countSelected();
    expect(component.actionsClicked).toBe(false);
    expect(component.selectedCount).toBe(2);
});

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should location be displayed when getLocationList() is called', () => {
 
    const roleId = ' Id';
    const data.invoiceData;
    data.invoiceData.getLocationList.and.returnValue(of(data.invoiceData));
 
    component.getLocationList();
 
    expect(data.invoiceData.getLocationList).toHaveBeenCalledWith(roleId);
    expect(component.LocationList).toEqual(Result);
  });

it('should provider list be displyed when getProviderList() is called', () => {
  

    ubmService.getProviderList.and.returnValue(of(result));

    component.getProviderList();

    expect(ubmService.getProviderList).toHaveBeenCalled();
    expect(component.providerList).toEqual(result);
  });

it('should Commodity list be displyed when getCommodityList()  is called', () => {
  

    ubmService.getCommodityList.and.returnValue(of(result));

    component.getCommodityList();

    expect(ubmService.getCommodityList).toHaveBeenCalled();
    expect(component.CommodityList).toEqual(result);
  });

it('should UBMMeter list be displyed when getUBMMeterList()  is called', () => {
  

    ubmService.getUBMMeterList.and.returnValue(of(result));

    component.getUBMMeterList();

    expect(ubmService.getUBMMeterList).toHaveBeenCalled();
    expect(component.UBMMeterList).toEqual(result);
  });

it('should Account list be displyed when getAccountList()  is called', () => {
  

    ubmService.getAccountList.and.returnValue(of(result));

    component.getAccountList();

    expect(ubmService.getAccountList).toHaveBeenCalled();
    expect(component.AccountList).toEqual(result);
  });



it('should update provider properties when  updateProviderList() is called ', () => {
 
    const tempAccountsMappingList = [];
    component.tempAccountsMappingList = mockTempAccountsMappingList;
 
    component.updateProviderList();
 
    expect(component.providerList).toEqual([]);
    expect(component.distinctProviderList).toEqual([]);
    expect(component.providerclicked).toBe(false);
    expect(component.invoiceInformation.providerId).toBe(0);
    expect(component.providerName).toBe('');
  });

it('should update location when updateAccountNumberList() is  called', () => {
 
    const accountNumberList   = [];
    component.tempAccountsMappingList = accountNumberList  ;

    component.updateProviderList();

    expect(component.accountNumberList).toEqual([]);
    expect(component.distinctAccountNumberList).toEqual([]);
    expect(component.accountNumberClicked).toBe(false);
    expect(component.invoiceInformation.accountNumber).toBe('');
    expect(component.accountName).toBe('');
  });


it('should set utilityType to "Multiple" when getCommodityByAccNo() is called ', () => {
 
    const AccountsMappingList = [
      { accountNumber: 'Account1', commodityName: 'Commodity1' },
      { accountNumber: 'Account1', commodityName: 'Commodity2' },
    ];
    component.accountsMappingList = AccountsMappingList;
    component.invoiceInformation.accountNumber = 'Account1';
 
    component.getCommodityByAccNo();
 
    expect(component.utilityType).toBe('Multiple');
  });

  it('should set utilityType to a single commodity when getCommodityByAccNo() is called', () => {
  
    const  AccountsMappingList = [
      { accountNumber: 'Account1', commodityName: 'Commodity1' },
    ];
    component.accountsMappingList = AccountsMappingList;
    component.invoiceInformation.accountNumber = 'Account1';

    component.getCommodityByAccNo();

    expect(component.utilityType).toBe('Commodity1');  
  });

  it('should set utilityType to an empty string when getCommodityByAccNo() is called', () => {
 
    const AccountsMappingList = [
      { accountNumber: 'Account2', commodityName: 'Commodity1' },
    ];
    component.accountsMappingList = AccountsMappingList;
    component.invoiceInformation.accountNumber = 'Account1';

    component.getCommodityByAccNo();

    expect(component.utilityType).toBe('');
  });
