
it('should toggle dropdown when toggleActionsDropdown() id called',()=>{
const actionsClicked = component.actionsClicked;
component.toggleActionsDropdown();
expect(component.actionsClicked).toBe(actionsClicked);
});

it('should actionsClicked be false when clickedOutsideActions()', () => {
component.actionsClicked = true;
component.clickedOutsideActions();
expect(component.actionsClicked).toBe(false);
});

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should toggle expand when toggleRowMenu() is called',()=>{
const IsRowExpanded = data.IsRowExpanded;
component.toggleRowMenu(data);
expect(data.IsRowExpanded).toBe(IsRowExpanded);
});

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should flagHeader update when changeflagheader() is called', () => {
 
 const data: InvoicoleaderDetails = {clickFlag: false};
 expect(component.filterclicked).toBe(false);
 component.resetAllFlag(data);
 expect(data.clickFlag).toBe(true);
});  

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should clickFlag reset when resetAllFlag() is called', () => {
     expect( component.invoiceHeader.clickFlag).toBe(true);
     component.resetAllFlag();
     expect(component.invoiceHeader[0].clickFlag).toBe(false);
     expect(component.invoiceHeader[1].clickFlag).toBe(false);
});

----x-----x-----x-----x-----x-----x-----x-----x----x----x
 it('should toggle date range be selected when toggleCustomRange() is called', () => {
  component.toggleCustomRange();
  expect(component.customRange).toBe(true);
constcomponent.selectedDateRange = calenderCustomRange;
 });
----x-----x-----x-----x-----x-----x-----x-----x----x----x

it('should selectedRows be displayed whengetAllSelectedRows() is called', () => {
   expect(row.IsRowChecked).toBe(false)
    
    row.IsRowChecked = component.selectAllRows ;

    component.countSelected();

    component.getAllSelectedRows();

    expect(component.result[0].IsRowChecked).toBe(true);
    expect(component.result[1].IsRowChecked).toBe(true);
    expect(component.countSelected).toHaveBeenCalled();
  });

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should selected be counted when countSelected() is called ', () => {
    component.result = [ { IsRowChecked: true }, { IsRowChecked: false }, { IsRowChecked: true }];
    component.countSelected();
    expect(component.actionsClicked).toBe(false);
    expect(component.selectedCount).toBe(2);
});

----x-----x-----x-----x-----x-----x-----x-----x----x----x
it('should location be displayed when getLocationList() is called', () => {
 
    const roleId = ' Id';
    const data.invoiceData;
    data.invoiceData.getLocationList.and.returnValue(of(data.invoiceData));
 
    component.getLocationList();
 
    expect(data.invoiceData.getLocationList).toHaveBeenCalledWith(roleId);
    expect(component.LocationList).toEqual(Result);
  });

it('should provider list be displyed when getProviderList() is called', () => {
  

    ubmService.getProviderList.and.returnValue(of(result));

    component.getProviderList();

    expect(ubmService.getProviderList).toHaveBeenCalled();
    expect(component.providerList).toEqual(result);
  });

it('should Commodity list be displyed when getCommodityList()  is called', () => {
  

    ubmService.getCommodityList.and.returnValue(of(result));

    component.getCommodityList();

    expect(ubmService.getCommodityList).toHaveBeenCalled();
    expect(component.CommodityList).toEqual(result);
  });

it('should UBMMeter list be displyed when getUBMMeterList()  is called', () => {
  

    ubmService.getUBMMeterList.and.returnValue(of(result));

    component.getUBMMeterList();

    expect(ubmService.getUBMMeterList).toHaveBeenCalled();
    expect(component.UBMMeterList).toEqual(result);
  });

it('should Account list be displyed when getAccountList()  is called', () => {
  

    ubmService.getAccountList.and.returnValue(of(result));

    component.getAccountList();

    expect(ubmService.getAccountList).toHaveBeenCalled();
    expect(component.AccountList).toEqual(result);
  });



it('should update provider properties when  updateProviderList() is called ', () => {
 
    const tempAccountsMappingList = [];
    component.tempAccountsMappingList = mockTempAccountsMappingList;
 
    component.updateProviderList();
 
    expect(component.providerList).toEqual([]);
    expect(component.distinctProviderList).toEqual([]);
    expect(component.providerclicked).toBe(false);
    expect(component.invoiceInformation.providerId).toBe(0);
    expect(component.providerName).toBe('');
  });

it('should update location when updateAccountNumberList() is  called', () => {
 
    const accountNumberList   = [];
    component.tempAccountsMappingList = accountNumberList  ;

    component.updateProviderList();

    expect(component.accountNumberList).toEqual([]);
    expect(component.distinctAccountNumberList).toEqual([]);
    expect(component.accountNumberClicked).toBe(false);
    expect(component.invoiceInformation.accountNumber).toBe('');
    expect(component.accountName).toBe('');
  });


it('should set utilityType to "Multiple" when getCommodityByAccNo() is called ', () => {
 
    const AccountsMappingList = [
      { accountNumber: 'Account1', commodityName: 'Commodity1' },
      { accountNumber: 'Account1', commodityName: 'Commodity2' },
    ];
    component.accountsMappingList = AccountsMappingList;
    component.invoiceInformation.accountNumber = 'Account1';
 
    component.getCommodityByAccNo();
 
    expect(component.utilityType).toBe('Multiple');
  });

  it('should set utilityType to a single commodity when getCommodityByAccNo() is called', () => {
  
    const  AccountsMappingList = [
      { accountNumber: 'Account1', commodityName: 'Commodity1' },
    ];
    component.accountsMappingList = AccountsMappingList;
    component.invoiceInformation.accountNumber = 'Account1';

    component.getCommodityByAccNo();

    expect(component.utilityType).toBe('Commodity1');  
  });

  it('should set utilityType to an empty string when getCommodityByAccNo() is called', () => {
 
    const AccountsMappingList = [
      { accountNumber: 'Account2', commodityName: 'Commodity1' },
    ];
    component.accountsMappingList = AccountsMappingList;
    component.invoiceInformation.accountNumber = 'Account1';

    component.getCommodityByAccNo();

    expect(component.utilityType).toBe('');
  });




  it('should set InvoiceInformation to English when getLanguageId() is 1', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(1);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationEnglish');
  });

  it('should set InvoiceInformation to Chinese  when getLanguageId() is 2', () => {
  
    spyOn(component.languageService, 'getLanguageId').and.returnValue(2);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationChinese');
  });

  it('should set InvoiceInformation to German when getLanguageId() is 3', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(3);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationGerman');
  });

 it('should set InvoiceInformation to Spanish when getLanguageId() is 4', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(4);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationSpanish');
  });

it('should set InvoiceInformation to Italian when getLanguageId() is 5', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(5);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationItalian');
  });

it('should set InvoiceInformation to Dutch when getLanguageId() is 6', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(6);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationDutch');
  });

it('should set InvoiceInformation to Japanese when getLanguageId() is 7', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(7);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationJapanese');
  });

it('should set InvoiceInformation to Pt when getLanguageId() is 8', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(8);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationPt');
     });

     
it('should set InvoiceInformation to French when getLanguageId() is 9', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(9);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationFrench');
     });

it('should set InvoiceInformation to Korean when getLanguageId() is 10', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(10);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationKorean');
     });

it('should set InvoiceInformation to Arabic when getLanguageId() is 10', () => {
 
    spyOn(component.languageService, 'getLanguageId').and.returnValue(10);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationArabic');
     });

  it('should set InvoiceInformation to Hebrew when getLanguageId() is 12', () => {
    // Arrange
    spyOn(component.languageService, 'getLanguageId').and.returnValue(12);

    component.getInvoiceInformationTranslationValues();

    expect(component.InvoiceInformation).toEqual('InvoiceInformationHebrew');
  });




it('should set invoice.IsFilter be retained when RemoveFromRetainFilter() id called', () => {
 
    const restService TestBed.inject(UBMCommonService); 
const RemoveFromRetainFilter: removeFromRetainFilter[] [];
 
    component.removeFromRetainFilter('Filter2', invoice);
 
    expect(invoice.IsFilter).toBe(false);
    expect(component.retainFilterArray.length).toBe(1);
    expect(component.retainFilterArray[0].name).toBe('Filter1');
  }); 

it('should location be displayed when getLocationList() is called', () => {
 
    const roleId = 'RoleId';
    const data.invoiceData;
    data.invoiceData.getLocationList.and.returnValue(of(data.invoiceData));
 
    component.getLocationList();
 
    expect(data.invoiceData.getLocationList).toHaveBeenCalledWith(roleId);
    expect(component.facilitylist).toEqual(Result);
  });


it('should  sortfilterpopup reflect false when closepopup() is called', () => {
    component.closepopup();
    expect(component.sortfilterpopup).toBe(false);
  });

  it('should  childResult get sorted when  sortChildDataAscBy() is called ', () => {
    
   const restService TestBed.inject(UBMCommonService); 
const SortProperty: sortProperty[] [];
    component.childResult =  ChildResult;
    component.sortOrder = 1;
 
    component.sortChildDataAscBy(columnName);
 
    const sortedChildResult = component.childResult;
    expect(sortedChildResult.length).toBe(3);
    expect(sortedChildResult[0].sortProperty).toBe(1);
    expect(sortedChildResult[1].sortProperty).toBe(2);
    expect(sortedChildResult[2].sortProperty).toBe(3);
  });


it('should reset filters for the retainFilterArray() ', () => {
  
    const invoice.name = { name: 'ColumnName' };
    component.distinctFilteredValues = [
      { IsChecked: false },
      { IsChecked: true },
      { IsChecked: false },
    ];
    component.retainFilterArray();
    component.FilterClicked = true;
    component.searchText = 'FilterText';
    component.selectAllFilter = false;
    component.inderminateFilter = true;
    component.isFilterApplyDisable = true;

    component.resetGridfilter(invoice);

    expect(invoice.name).toBe('ColumnName');
    expect(component.selectAllFilter).toBe(true);
    expect(component.inderminateFilter).toBe(false);
    expect(component.isFilterApplyDisable).toBe(false);
    expect(component.distinctFilteredValues.every((s) => s.IsChecked === true)).toBe(true);
    expect(component.retainFilterArray.some((s) => s.name === 'ColumnName' && s.isDeleteFilter === true)).toBe(true);
    expect(component.FilterClicked).toBe(false);
    expect(component.searchText).toBe('');
  });
