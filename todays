
it('should log an error when GetAccountsMappingList () fails', ()=>{
const errorMessage = "Error fetching the AccountsMapping list!!!"; 
mockUBMService.this.GetAllDropdownLists.and.result (throwError(() =>errorMessage)); spyon(console, 'log'); 
component.GetAccountsMappingList();
expect (console.log).toHaveBeenCalledwith(errorMessage);
});

 it('should populate AccountsMappingList when GetAccountsMappingList() is successful', () => {
     
    const roleId = 'test-role-id';
    const accountsMappingList = tempAccountsMappingList;
    
    mockUBMService.getAccountMappingList.and.returnValue(of(tempAccountsMappingList));

    componentOrService.getAccountsMapping(roleId);

    expect(mockUBMService.getAccountMappingList).toHaveBeenCalledWith(roleId); 
    expect(componentOrService.accountsMappingList).toEqual(tempAccountsMappingList);
  });

it('should  Location Change when onLocationChange() is called', () => {
    const location;

    component.onLocationChange(location);

    expect(component.locationclicked).toBe(true);
    expect(component.invoiceInformation.locationId).toBe('123');
    expect(component.locationName).toBe('Test Facility');
    expect(component.searchTextLocation).toBe('');
     
  });

  it('should reset dropdown and set tempAccountsMappingList when onLocationChange() is Called', fakeAsync(() => {
    component.invoiceInformation.locationId = 'some value';  

    component.onLocationChange({ locationId: '' });  

    expect(component.locationclicked).toBe(true);
    expect(component.invoiceInformation.locationId).toBe('');
    expect(component.locationName).toBe('');
    expect(component.searchTextLocation).toBe('');
 
    const req = httpMock.expectOne('/your-api-endpoint');  
 
    req.flush({ data: 'response data' });
 
    tick();

    expect(component.isLocationDropdownOpen).toBe(component.isLocationDropdownOpen);  
    expect(component.tempAccountsMappingList).toEqual(component.accountsMappingList);
  }));
