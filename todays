it('should customers range be selected when toggleCustomRange() is called"', () => {
  component.toggleCustomRange();
  
  expect(component.customRange).toBe(true);

  expect(component.selectedDateRange).toBe('calenderCustomRange');
});

it('should Dates update when datesUpdated() is called"', () => {
  const event = 'Event';

  component.datesUpdated();
  expect(component.showDateRange).toBe(true);
  expect(component.selectedStartDate).toBe('moment(Event.startDate)');
  expect(component.selectedEndDate).toBe('moment(Event.endDate)');
});

it('should Date range resert when resetDateRange() is called"', () => {
    component.resetDateRange();
  expect(component.showDateRange).toBe(false);
  expect(component.isFilterApplyDisable).toBe(false);
   expect(component.selectedDateRange).toBe('selectAll');
   expect(component.selectedDates).toBe({startDate:moment},{endDate:moment});
  expect(component.showDateRange).toBe(true);
  expect(component.selectedStartDate).toBe('moment(component.selectedDates.startDate)');
  expect(component.selectedEndDate).toBe('moment(component.selectedDates.endDate)');
});

it('should FilterData be selected when getselectedFilterData() is called"', () => {
  const filterResult = 'FilterResult';
  component.getselectedFilterData();
  expect(component.isFilterApplyDisable).toBe(false);
  component.toggleFilterSelection(filterResult)
});

it('should UpdatedDateTime be selected when getselectedUpdatedDateTime() is called"', () => {
  expect(component.isFilterApplyDisable).toBe(false);
  expect(component.showDateRange).toBe(false);
  component.getselectedUpdatedDateTime();
  expect(component.selectedDateRange).toBe(calenderCustomRange);
  expect(component.retainSelectedRadioState).toBe(calenderCustomRange);
  expect(component.showDateRange).toBe(true);
});

it('should select all filter values when getselectedAllFilterData() is called', () => {
 
    expect(component.selectAllFilter).toBe(true);
    component.distinctFilteredValues = [
      { IsChecked: false },
      { IsChecked: false },
      { IsChecked: false },
    ];  

    component.getselectedAllFilterData();
  
    expect(component.distinctFilteredValues.every((v: any) => v.IsChecked)).toBeTrue();
    expect(component.inderminateFilter).toBeFalse();
    expect(component.isFilterApplyDisable).toBeFalse();
  });

it('should select all filter values when toggleFilterSelection() is called', () => {
    // Arrange
    const filterResult = "filterResult"; 
    component.toggleFilterSelection("FilterResult");
    expect(component.selectAllFilter).toBeTrue();
    expect(component.inderminateFilter).toBeFalse();
  });

 it('should toggle disable when toggleDefaultState() is called', () => {
    // Arrange
    component.invoiceYearApplyClicked = false;
    expect(component.isAllchecked).toEqual(component.Year);

    component.toggleDefaultState();

    expect(component.buttonsDisabled).toBeFalse();
  });
