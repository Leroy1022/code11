
it('should log an error when GetAccountsMappingList () fails', ()=>{
const errorMessage = "Error fetching the AccountsMapping list!!!"; 
mockUBMService.this.GetAllDropdownLists.and.result (throwError(() =>errorMessage)); spyon(console, 'log'); 
component.GetAccountsMappingList();
expect (console.log).toHaveBeenCalledwith(errorMessage);
});

 it('should populate AccountsMappingList when GetAccountsMappingList() is successful', () => {
     
    const roleId = 'test-role-id';
    const accountsMappingList = tempAccountsMappingList;
    
    mockUBMService.getAccountMappingList.and.returnValue(of(tempAccountsMappingList));

    componentOrService.getAccountsMapping(roleId);

    expect(mockUBMService.getAccountMappingList).toHaveBeenCalledWith(roleId); 
    expect(componentOrService.accountsMappingList).toEqual(tempAccountsMappingList);
  });

it('should  Location Change when onLocationChange() is called', () => {
    const location;

    component.onLocationChange(location);

    expect(component.locationclicked).toBe(true);
    expect(component.invoiceInformation.locationId).toBe('123');
    expect(component.locationName).toBe('Test Facility');
    expect(component.searchTextLocation).toBe('');
     
  });

  it('should reset dropdown and set tempAccountsMappingList when onLocationChange() is Called', fakeAsync(() => {
    component.invoiceInformation.locationId = 'some value';  

    component.onLocationChange({ locationId: '' });  

    expect(component.locationclicked).toBe(true);
    expect(component.invoiceInformation.locationId).toBe('');
    expect(component.locationName).toBe('');
    expect(component.searchTextLocation).toBe('');
 
    const req = httpMock.expectOne('/your-api-endpoint');  
 
    req.flush({ data: 'response data' });
 
    tick();

    expect(component.isLocationDropdownOpen).toBe(component.isLocationDropdownOpen);  
    expect(component.tempAccountsMappingList).toEqual(component.accountsMappingList);
  }));

it('should  Location Change when onBuildingChange() is called', () => {
    const building;

    component.onBuildingChange(building);

    expect(component.buildingclicked).toBe(true);
    expect(component.invoiceInformation.buildingId).toBe('123');
    expect(component.buildingName).toBe('Test building');
    expect(component.searchTextBuilding).toBe('');
     
  });

  it('should reset dropdown and set tempAccountsMappingList when onBuildingChange() is Called', fakeAsync(() => {
    component.invoiceInformation.buildingId = 'some value';  

    component.onBuildingChange({ buildingId: '' });  

    expect(component.buildingclicked).toBe(true);
    expect(component.invoiceInformation.buildingId).toBe('');
    expect(component.buildingName).toBe('');
    expect(component.searchTextBuilding).toBe('');
 
    const req = httpMock.expectOne('/your-api-endpoint');  
 
    req.flush({ data: 'response data' });
 
    tick();

    expect(component.isBuildingDropdownOpen).toBe(component.isBuildingDropdownOpen);  
    expect(component.tempAccountsMappingList).toEqual(component.accountsMappingList);
  }));

it('should  Location Change when onProviderChange() is called', () => {
    const Provider;

    component.onProviderChange(Provider);

    expect(component.providerclicked).toBe(true);
    expect(component.invoiceInformation.providerId).toBe('123');
    expect(component.providerName).toBe('Test building');
    expect(component.searchTextProvider).toBe('');
     
  });  

  it('should reset dropdown and set tempAccountsMappingList when onBuildingChange() is Called', fakeAsync(() => {
    component.invoiceInformation.providerId = 'some value';  

    component.onProviderChange({ providerId: '' });  

    expect(component.providerclicked).toBe(true);
    expect(component.invoiceInformation.providerId).toBe('');
    expect(component.providerName).toBe('');
    expect(component.searchTextProvider).toBe('');
 
    const req = httpMock.expectOne('/your-api-endpoint');  
 
    req.flush({ data: 'response data' });
 
    tick();

    expect(component.isProviderDropdownOpen).toBe(component.isProviderDropdownOpen);  
    expect(component.tempAccountsMappingList).toEqual(component.accountsMappingList);
  }));




it('should set premise properties  when premiseNumber() is empty', () => {
    component.tempAccountsMappingList = [];
    component.premiseNumber();
    expect(component.invoiceInformation.premiseNumber).toBe(InvoiceInfoConstants.NONE);
    expect(component.premisesName).toBe(InvoiceInfoConstants.NONE);
  });

  it('should set premise properties  when premiseNumber() has one item', () => {
    component.tempAccountsMappingList = component.accountsMappingList;
    component.premiseNumber();
    expect(component.premiseIdclicked).toBe(true);
    expect(component.invoiceInformation.premiseNumber).toBe('premiseNumber');
    expect(component.premisesName).toBe('premisesName');
  });

  it('should reset premise properties when premiseNumber() has multiple items', () => {
    component.tempAccountsMappingList =  component.accountsMappingList;
    component.premiseNumber();
    expect(component.premiseIdclicked).toBe(false);
    expect(component.invoiceInformation.premiseNumber).toBe('');
    expect(component.premisesName).toBe('');
  });


it('should  Location Change when onLocationChange() is called', () => {
    const location = {
      locationId: '123',
      facilityName: 'Test Facility',
    };

    component.onLocationChange(location);

    expect(component.locationclicked).toBe(true);
    expect(component.invoiceInformation.locationId).toBe('123');
    expect(component.locationName).toBe('Test Facility');
    expect(component.searchTextLocation).toBe('');
    expect(component.isLocationDropdownOpen).toBe(component.isLocationDropdownOpen); 
      });

  it('should reset dropdown and set tempAccountsMappingList when onLocationChange() is empty', () => {
    component.invoiceInformation.locationId = 'some value'; 

    component.onLocationChange({ locationId: '' });  

    expect(component.locationclicked).toBe(true);
    expect(component.invoiceInformation.locationId).toBe('');
    expect(component.locationName).toBe('');
    expect(component.searchTextLocation).toBe('');
    expect(component.isLocationDropdownOpen).toBe(component.isLocationDropdownOpen); 
    expect(component.tempAccountsMappingList).toEqual(component.accountsMappingList);
  });


 it('should  Building Change when onBuildingChange() is called', () => {
    const Building = {
      buildingId: '102',
      buildingName: 'Test Building',
    };

    component.onBuildingChange(building);

    expect(component.buildingclicked).toBe(true);
    expect(component.invoiceInformation.buildingId).toBe('102');
    expect(component.buildingName).toBe('Test Building');
    expect(component.searchTextBuilding).toBe('');
    expect(component.isBuildingDropdownOpen).toBe(component.isBuildingDropdownOpen); 
      });

  it('should reset dropdown and set tempAccountsMappingList when onBuildingChange() is empty', () => {
    component.invoiceInformation.buildingId = 'some value'; 

    component.onBuildingChange({ buildingId: '' });  

    expect(component.buildingclicked).toBe(true);
    expect(component.invoiceInformation.buildingId).toBe('');
    expect(component.buildingName).toBe('');
    expect(component.searchTextbuilding).toBe('');
    expect(component.isBuildingDropdownOpen).toBe(component.isBuildingDropdownOpen); 
    expect(component.tempAccountsMappingList).toEqual(component.accountsMappingList);
  });
