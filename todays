
it('should log an error when GetAccountsMappingList () fails', ()=>{
const errorMessage = "Error fetching the AccountsMapping list!!!"; 
mockUBMService.this.GetAllDropdownLists.and.result (throwError(() =>errorMessage)); spyon(console, 'log'); 
component.GetAccountsMappingList();
expect (console.log).toHaveBeenCalledwith(errorMessage);
});

 it('should populate AccountsMappingList when GetAccountsMappingList() is successful', () => {
     
    const roleId = 'test-role-id';
    const accountsMappingList = tempAccountsMappingList;
    
    mockUBMService.getAccountMappingList.and.returnValue(of(tempAccountsMappingList));

    componentOrService.getAccountsMapping(roleId);

    expect(mockUBMService.getAccountMappingList).toHaveBeenCalledWith(roleId); 
    expect(componentOrService.accountsMappingList).toEqual(tempAccountsMappingList);
  });

it('should  Location Change when onLocationChange() is called', () => {
  
  window.sessionStorage[ 'roleId'] = 1;
  const invoiceData = 
  facilityList = mockFacilityList 
  mockUBMService.getLocationList.and.returnValue (of (facilityList));

  spyOn(component, 'resetDropdown');
  spyOn(component, 'updateProviderList');
  spyOn(component, 'updateBuildingList');
  spyOn(component, 'updateAccountNumberList');

  // Act
  component.onLocationChange(invoiceData);

  // Assert
  expect(component.locationClicked).toBe(true);
  expect(component.invoiceInformation.locationId).toBe(invoiceData.locationId);
  expect(component.locationName).toBe(invoiceData.facilityName);
  expect(component.searchTextLocation).toBe('');
  expect(component.isLocationDropdownOpen).toBe(false);

  expect(component.resetDropdown).toHaveBeenCalled();
  expect(component.providerSelected).toBe(false);
  expect(component.buildingSelected).toBe(false);
  expect(component.accountSelected).toBe(false);

  expect(component.updateProviderList).toHaveBeenCalled();
  expect(component.updateBuildingList).toHaveBeenCalled();
  expect(component.updateAccountNumberList).toHaveBeenCalled();
});
